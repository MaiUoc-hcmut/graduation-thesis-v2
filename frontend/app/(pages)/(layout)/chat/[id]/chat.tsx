"use client"

import { useMemo, useCallback } from "react";

import { MainContainer, Sidebar, ConversationList, Conversation, Avatar, ChatContainer, ConversationHeader, MessageGroup, Message, MessageList, MessageInput, TypingIndicator, Status, ExpansionPanel, Search, Loader } from "@chatscope/chat-ui-kit-react";

import {
    useChat,
    ChatMessage,
    MessageContentType,
    MessageDirection,
    MessageStatus
} from "@chatscope/use-chat";
import { MessageContent, TextContent, User } from "@chatscope/use-chat";
import chatApi from "@/app/api/chatApi";
import { group } from "console";
import Link from "next/link";
import { useEffect, useRef, useState } from 'react';
import notifyApi from "@/app/api/notifyApi";

export default function Chat({ user, params }: { user: User, params: { id: string } }) {
    const [page, setPage] = useState(1);
    const loadingRef = useRef(null);;
    const [hasMore, setHasMore] = useState(true);
    const [notifycations, setNotifycations] = useState<any>([])

    const fetchNotifications = async (pageNum: number) => {
        // Fetch notifications from API here


        if (user) {
            const nextPage = page + 1; // Increase page before calling API
            setPage(nextPage);

            await notifyApi.getNotify(`${user.id}`, `${pageNum}`).then((data) => {
                if (data.data.notifications.length === 0) {
                    setHasMore(false); // No more notifications

                } else {
                    setNotifycations((prevNotifications: any) => [...prevNotifications, ...data.data.notifications]);
                    setPage(pageNum + 1);
                }
            }).catch((err) => { })
        }
    };
    useEffect(() => {
        var options = {
            root: null,
            rootMargin: '0px',
            threshold: 1.0
        }

        let observer = new IntersectionObserver(async (entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting && hasMore) { // Only call API if there are more notifications
                    fetchNotifications(page);
                }
            });
        }, options);

        if (loadingRef.current) {
            observer.observe(loadingRef.current);
        }

        return () => {
            if (loadingRef.current) {
                // eslint-disable-next-line react-hooks/exhaustive-deps
                observer.unobserve(loadingRef.current);
            }
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [hasMore, page]);
    // Get all chat related values and methods from useChat hook 
    const {
        currentMessages, conversations, activeConversation, setActiveConversation, sendMessage, getUser, currentMessage, setCurrentMessage,
        sendTyping, setCurrentUser
    } = useChat();

    useEffect(() => {
        setCurrentUser(user);
    }, [user, setCurrentUser]);

    useEffect(() => {
        setActiveConversation(params.id);
    }, [params.id, setActiveConversation]);

    // Get current user data
    const [currentUserAvatar, currentUserName] = useMemo(() => {

        if (activeConversation) {
            const participant = activeConversation.participants.length > 0 ? activeConversation.participants[0] : undefined;

            if (participant) {
                const user = getUser(participant.id);
                if (user) {
                    return [<Avatar key="avatar" src={user.avatar} />, <span key="username">{user.username}</span>]
                }
            }
        }

        return [undefined, undefined];

    }, [activeConversation, getUser]);

    const handleChange = (value: string) => {
        // Send typing indicator to the active conversation
        // You can call this method on each onChange event
        // because sendTyping method can throttle sending this event
        // So typing event will not be send to often to the server
        setCurrentMessage(value);
        if (activeConversation) {
            sendTyping({
                conversationId: activeConversation?.id,
                isTyping: true,
                userId: user.id,
                content: value, // Note! Most often you don't want to send what the user types, as this can violate his privacy!
                throttle: true
            });
        }

    }

    const handleSend = (text: string) => {

        const message = new ChatMessage({
            id: "", // Id will be generated by storage generator, so here you can pass an empty string
            content: text as unknown as MessageContent<TextContent>,
            contentType: MessageContentType.TextHtml,
            senderId: user.id,
            direction: MessageDirection.Outgoing,
            status: MessageStatus.Sent
        });

        if (activeConversation) {
            sendMessage({
                message,
                conversationId: activeConversation.id,
                senderId: user.id,
            });
            chatApi.createMessage({
                groupId: activeConversation.id,
                data: text
            }).then(() => { }).catch(() => { });
        }

    };

    const getTypingIndicator = useCallback(
        () => {

            if (activeConversation) {

                const typingUsers = activeConversation.typingUsers;

                if (typingUsers.length > 0) {

                    const typingUserId = typingUsers.items[0].userId;

                    // Check if typing user participates in the conversation
                    if (activeConversation.participantExists(typingUserId)) {

                        const typingUser = getUser(typingUserId);

                        if (typingUser) {
                            return <TypingIndicator content={`${typingUser.username} is typing`} />
                        }

                    }

                }

            }


            return undefined;

        }, [activeConversation, getUser],
    );


    return (
        <div className="h-[calc(100vh-80px)]">
            <MainContainer responsive className="">
                <Sidebar position="left" scrollable className="">
                    <ConversationHeader style={{ backgroundColor: "#fff" }}>
                        <Avatar src={user.avatar} status="available" />
                        <ConversationHeader.Content>
                            {user.username}
                        </ConversationHeader.Content>
                    </ConversationHeader>
                    <Search placeholder="Tìm kiếm..." className="h-10" />
                    <ExpansionPanel
                        open
                        title="Giáo viên"
                        className=""
                    >
                        <ConversationList className="">
                            {conversations.map((c, index) => {

                                // Helper for getting the data of the first participant
                                const [avatar, name] = (() => {

                                    const participant = c.participants.length > 0 ? c.participants[0] : undefined;

                                    if (participant) {
                                        const user = getUser(participant.id);
                                        if (user) {

                                            return [<Avatar key={user.id} src={user.avatar} status="available" />, user.username]

                                        }
                                    }

                                    return [undefined, undefined]
                                })();

                                return (
                                    <Link href={`/chat/${c.id}`} key={c.id}>
                                        <Conversation
                                            name={name}
                                            lastSenderName={"Bạn"}
                                            info={"a"}
                                            // info={c.draft ? `Draft: ${c.draft.replace(/<br>/g, "\n").replace(/&nbsp;/g, " ")}` : ""}
                                            active={activeConversation?.id === c.id}
                                            unreadCnt={c.unreadCounter}
                                            onClick={() => setActiveConversation(c.id)}
                                        >
                                            {avatar}
                                        </Conversation>
                                    </Link>
                                );
                            })}
                        </ConversationList>
                    </ExpansionPanel>
                    <ExpansionPanel
                        open
                        title="Học sinh"
                        className=""
                    >
                        <ConversationList className="">
                            {conversations.map(c => {
                                // Helper for getting the data of the first participant
                                const [avatar, name] = (() => {

                                    const participant = c.participants.length > 0 ? c.participants[0] : undefined;

                                    if (participant) {
                                        const user = getUser(participant.id);
                                        if (user) {

                                            return [<Avatar key={user.id} src={user.avatar} status="available" />, user.username]

                                        }
                                    }

                                    return [undefined, undefined]
                                })();

                                return <Conversation key={c.id}
                                    name={name}
                                    info={c.draft ? `Draft: ${c.draft.replace(/<br>/g, "\n").replace(/&nbsp;/g, " ")}` : ``}
                                    active={activeConversation?.id === c.id}
                                    unreadCnt={c.unreadCounter}
                                    onClick={() => setActiveConversation(c.id)}>
                                    {avatar}
                                </Conversation>
                            })}
                        </ConversationList>
                    </ExpansionPanel>
                    <ExpansionPanel
                        open
                        title="Nhóm"
                        className=""
                    >
                        <ConversationList className="">
                            {conversations.map(c => {
                                // Helper for getting the data of the first participant
                                const [avatar, name] = (() => {

                                    const participant = c.participants.length > 0 ? c.participants[0] : undefined;

                                    if (participant) {
                                        const user = getUser(participant.id);
                                        if (user) {

                                            return [<Avatar key={user.id} src={user.avatar} status="available" />, user.username]

                                        }
                                    }

                                    return [undefined, undefined]
                                })();

                                return <Conversation key={c.id}
                                    name={name}
                                    info={c.draft ? `Draft: ${c.draft.replace(/<br>/g, "\n").replace(/&nbsp;/g, " ")}` : ``}
                                    active={activeConversation?.id === c.id}
                                    unreadCnt={c.unreadCounter}
                                    onClick={() => setActiveConversation(c.id)}>
                                    {avatar}
                                </Conversation>
                            })}
                        </ConversationList>
                    </ExpansionPanel>


                </Sidebar>

                <ChatContainer>
                    {activeConversation && <ConversationHeader>
                        {currentUserAvatar}
                        <ConversationHeader.Content userName={currentUserName} />
                    </ConversationHeader>}
                    <MessageList typingIndicator={getTypingIndicator()}>
                        {activeConversation && currentMessages.map((g) => <MessageGroup key={g.id} direction={g.direction}>
                            {/* <Avatar src={user.avatar} status="available" /> */}

                            <MessageGroup.Messages>
                                {g.messages.map((m: ChatMessage<MessageContentType>) => (
                                    <Message key={m.id} model={{
                                        type: "html",
                                        payload: m.content,
                                        direction: m.direction,
                                        position: "normal",
                                    }}>

                                    </Message>
                                ))}
                            </MessageGroup.Messages>
                        </MessageGroup>)}
                        {hasMore && <div className="w-full flex justify-center items-center py-5">
                            <Loader className="">
                            </Loader>
                        </div>
                        }

                    </MessageList>
                    <MessageInput className="mb-2" value={currentMessage} onChange={handleChange} onSend={handleSend} disabled={!activeConversation} attachButton={true} placeholder="Nhập ở đây..." />
                </ChatContainer>

            </MainContainer>
        </div>
    )
}